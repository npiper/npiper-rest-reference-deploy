---
# AWS tasks are run 'locally'

# Authentication details should be passed in as arguments or exported in the shell before running this playbook
# Ideally they should be stored in Hashicorp's 'Vault'
# e.g.
# export AWS_ACCESS_KEY_ID='my-access-key123'
# export AWS_SECRET_ACCESS_KEY='sekrit23418'
#
# Run with `ansible-playbook -i testing infra.yml`

## Create a VPC - non default
- name: CREATE AWS ENVIRONMENT
  hosts: localhost
  connection: local
  gather_facts: False
  #vars:
    #instance_type: t2.micro
    #ec2_count: 1

# This playbook sets up an Amazon Container environment
  tasks:
  # Gather facts about any VPC with a tag key Name and value Example
  - name: Get matching VPC
    ec2_vpc_net_facts:
      region: "{{ aws_region }}"
      filters:
        "tag:domain_name": "{{ domain_name }}"
    register: avpc

## PlantUML

# TaskDefinition
  - name: Create TaskDefinition
    ecs_taskdefinition:
     family: "{{ docker_task_family }}"
     containers:
     - name: "{{ docker_image_name }}"
       essential: true
       image: "{{ docker_image_version }}"
       portMappings:
       - containerPort: "{{ docker_image_containerport }}"
         hostPort: "{{ docker_image_ecsport }}"
       cpu: "{{ docker_image_cpu }}"
       memory: "{{ docker_image_memory }}"
     state: present
    register: docker_taskdef

  - name: create ECS service on VPC network
    ecs_service:
      state: present
      name: "{{ docker_image_name }}-service"
      cluster: "{{ ecs_cluster }}"
      region: "{{ aws_region }}"
      delay: 10
      task_definition: '{{ docker_image_name }}:{{ docker_taskdef.taskdefinition.revision }}'
      desired_count: "{{ docker_instance_count }}"
      launch_type: EC2


  - name: Run task
    ecs_task:
      operation: run
      cluster: "{{ ecs_cluster }}"
      task_definition: "{{ docker_image_name }}"
      count: 1
      started_by: ansible_user
    register: task_output
